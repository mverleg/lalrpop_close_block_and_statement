
use crate::ast::Ast;
use crate::ast::Expr;

grammar;

match {
    r"(\r\n|\n|\r)\s*\." => NLDot,
} else {
    r"\." => JustDot,
} else {
    r"(\r\n|\n|\r)+" => NL,
} else {
    r"[ \t]+" => { },
} else {
    _
}

pub Root: Ast = {
    NL* <mut es:(<Expr> NL+)*> <e:Expr> NL* => {
        es.push(e);
        Ast { expressions: es }
    }
}

Expr: Expr = {
    FunctionExpr,
}

FunctionExpr: Expr = {
    <t: BinaryExpr> "\\" <f: FunctionExpr> => Expr::Function{ subject: Box::new(t), func: Box::new(f) },
    BinaryExpr,
}

BinaryExpr: Expr = {
    <l:BinaryExpr> "+" NL* <r:JustDotExpr> => Expr::Sum{ left: Box::new(l), right: Box::new(r) },
    JustDotExpr,
}

JustDotExpr: Expr = {
    <e:JustDotExpr> JustDot <v:Var> => Expr::Dot{ subject: Box::new(e), attr: v },
    NullaryExpr,
}

NullaryExpr: Expr = {
    Nr => Expr::Num(<>),
    Var => Expr::Var(<>),
    "(" <e:Expr> ")" => e,
}

Nr: u64 = {
    r"[0-9]+" => <>.parse().unwrap()
}

Var: String = {
    r"[a-zA-Z]+" => <>.parse().unwrap()
}
