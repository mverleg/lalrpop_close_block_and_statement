
use crate::ast::Ast;
use crate::ast::Expr;

grammar;

match {
    r"(\r\n|\n|\r)" => NL,
} else {
    r"[ \t]+" => { },
} else {
    _
}

pub Root: Ast = {
    NL* <mut es:(<Expr> NL+)+> <e:Expr> NL* => {
        es.push(e);
        Ast { expressions: es }
    }
}

Expr: Expr = {
    BinaryExpr => <>,
}

BinaryExpr: Expr = {
    <l:BinaryExpr> "+" NL* <r:DotExpr> => Expr::Sum(Box::new([l, r])),
    DotExpr,
}

DotExpr: Expr = {
    <e:DotExpr> "." <v:Var> => Expr::Dot(Box::new(e), v),
    NullaryExpr,
}

NullaryExpr: Expr = {
    Nr => Expr::Num(<>),
    Var => Expr::Var(<>),
    "(" <e:Expr> ")" => e,
}

Nr: u64 = {
    r"[0-9]+" => <>.parse().unwrap()
}

Var: String = {
    r"[a-zA-Z]+" => <>.parse().unwrap()
}
