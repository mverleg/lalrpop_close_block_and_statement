
use crate::ast::Ast;
use crate::ast::Expr;

grammar;

match {
    r"(\n|\r)+" => NL,
} else {
    r"[ \t]+" => { },
} else {
    _
}

pub Root: Ast = {
    <mut es:(<Expr> NL+)+> <e:Expr> NL* => {
        es.push(e);
        Ast { expressions: es }
    }
}

Expr: Expr = {
    BinaryExpr => <>,
}

BinaryExpr: Expr = {
    <l:BinaryExpr> "+" NL* <r:NullaryExpr> => Expr::Sum(Box::new([l, r])),
    NullaryExpr,
}

NullaryExpr: Expr = {
    Nr => Expr::Num(<>),
}

Nr: u64 = {
    r"[0-9]+" => <>.parse().unwrap()
}
