
use crate::ast::Ast;
use crate::ast::Expr;

grammar;

match {
    r"(\r\n|\n|\r)\s*\." => NLDot,
} else {
    r"\." => JustDot,
} else {
    r"(\r\n|\n|\r)+" => NL,
} else {
    r"[ \t]+" => { },
} else {
    _
}


pub Root: Ast = {
    NL* <mut es:(<Expr<AnyDot>> NL+)*> <e:Expr<AnyDot>> NL* => {
        es.push(e);
        Ast { expressions: es }
    }
}

AnyDot: () = {
    JustDot, NLDot,
}

Expr<Dot>: Expr = {
    BinaryExpr<Dot>,
}

BinaryExpr<Dot>: Expr = {
    <l:BinaryExpr<Dot>> "+" <r:DotExpr<Dot>> => Expr::Sum(Box::new([l, r])),
    DotExpr<Dot>,
}

DotExpr<Dot>: Expr = {
    <e:DotExpr<Dot>> Dot <v:Var> => Expr::Dot(Box::new(e), v),
    FunctionExpr<Dot>,
}

FunctionExpr<Dot>: Expr = {
    <t: FunctionExpr<Dot>> "\\" <f: BinaryExpr<JustDot>> "/" => Expr::Function(Box::new([t, f])),
    NullaryExpr<Dot>,
}

NullaryExpr<Dot>: Expr = {
    Nr => Expr::Num(<>),
    Var => Expr::Var(<>),
    "(" <e:Expr<Dot>> ")" => e,
}

Nr: u64 = {
    r"[0-9]+" => <>.parse().unwrap()
}

Var: String = {
    r"[a-zA-Z]+" => <>.parse().unwrap()
}
